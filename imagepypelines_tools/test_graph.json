{"name": "Pipeline", "id": "Pipeline#b9b4d7", "uuid": "bae751dacc484430929b4ae160b9b4d7", "args": ["images"], "VARS": {"images": "InputNone5168a000fe2b4752a6dbb0fb72a4ae60-node", "shape": "Dimensions4c2445c90bfc4149898bddd0d5df34e2-node", "fft": "ImageFFTcf3789055b374661965166fb0061b64e-node", "circles": "circular_pass_filter6ec397b7dd8443aab3dda2cf7c4d8af6-node", "unsqueezed": "Unsqueeze08d7d127479843b4b07ececd56e52788-node", "filtered": "freq_filter08eb6175843244a5bb640044e01d4764-node", "ifft": "ImageIFFTe302999cb8bb4d72a611814e141b7746-node", "safe": "DisplaySafee0a40ef1de89443ba9a0c8fb18e529b0-node", "null": "CompareView178480474898426597a19738a9be0906-node"}, "BLOCKS": {"InputNone5168a000fe2b4752a6dbb0fb72a4ae60-node": {"name": "InputNone", "id": "InputNone#087264", "uuid": "b26c7e6da0c34aa0b1168d565b087264", "args": [], "types": {}, "shapes": {}, "skip_enforcement": false, "batch_type": "all", "tags": [], "class_name": "Input", "DOCS": {"class": "An object to inject data into the graph\n\nAttributes:\n    data(any type):\n    loaded(bool): where", "__init__": "instantiates the Input\n\nArgs:\n    index(int,None): index of the input into the Pipeline", "process": "returns the loaded data"}}, "Dimensions4c2445c90bfc4149898bddd0d5df34e2-node": {"name": "Dimensions", "id": "Dimensions#b6993a", "uuid": "cff9a055273b4a0aa24f0a79b0b6993a", "args": ["image"], "types": {"image": "<class 'numpy.ndarray'>"}, "shapes": {"image": [[null, null], [null, null, null]]}, "skip_enforcement": false, "batch_type": "each", "tags": ["imagery"], "class_name": "Dimensions", "DOCS": {"class": "Retrieves the dimensions of the image, including number of channels. If\n`channels_none_if_2d` is True, then grayscale images will return\nn_channels = None. Otherwise n_channels will be equal to 1 for grayscale imagery.\n\nAttributes:\n    channels_none_if_2d(bool): whether or not to return n_channels = None for\n        grayscale imagery instead of n_channels = 1.\n\nDefault Enforcement:\n    1) image\n        type: np.ndarray\n        shapes: [(None,None), (None,None,None)]\n\nBatch Size:\n    \"each\"", "__init__": "Instantiates the object\n\nArgs:\n    channels_none_if_2d(bool): whether or not to return n_channels = None for\n        grayscale imagery instead of n_channels = 1.", "process": "Retrieves the height, width, and number of channels in the image.\n\nif `channels_none_if_2d` is True, then grayscale images will return\nn_channels = None, otherwise n_channels = 1 for grayscale images.\n\nNotes:\n    assume image channels are the last axis\n\nArgs:\n    image(np.ndarray): the input image\n\nReturns:\n    (tuple): tuple containing:\n\n        height(int): number of rows in image\n        width(int): number of columns in image\n        n_channels(int): number of channels in image"}}, "ImageFFTcf3789055b374661965166fb0061b64e-node": {"name": "ImageFFT", "id": "ImageFFT#1218a9", "uuid": "c995930b4a4441c6bd38b8ed721218a9", "args": ["image"], "types": {"image": "None"}, "shapes": {"image": null}, "skip_enforcement": false, "batch_type": "each", "tags": ["filtering", "imagery"], "class_name": "ImageFFT", "DOCS": {"class": "Performs an FFT on each Image channel independently\n\nDefault Enforcement:\n    1) image\n        type: np.ndarray\n        shapes: [(None,None), (None,None,None)]\n\nBatch Size:\n    \"each\"", "__init__": "instantiates the fft block", "process": "applies the fft to each channel'\n\nArgs:\n    images(np.ndarray): N channel image"}}, "circular_pass_filter6ec397b7dd8443aab3dda2cf7c4d8af6-node": {"name": "circular_pass_filter", "id": "circular_pass_filter#4ee925", "uuid": "958819c6818d418a8b7eecbf934ee925", "args": ["shape"], "types": {"shape": "None"}, "shapes": {"shape": null}, "skip_enforcement": false, "batch_type": "each", "tags": [], "class_name": "FuncBlock", "DOCS": {"class": "Block that will run any function you give it, either unfettered through\nthe __call__ function, or with optional hardcoded parameters for use in a\npipeline. Typically the FuncBlock is only used in the :obj:`blockify`\ndecorator method.\n\nAttributes:\n    func(function): the function to call internally\n    preset_kwargs(dict): preset keyword arguments, typically used for\n        arguments that are not data to process", "__init__": "instantiates the function block\n\nArgs:\n    func (function): the function you desire to turn into a block\n    preset_kwargs (dict): preset keyword arguments, typically used for\n        arguments that are not data to process\n    **block_kwargs: keyword arguments for :obj:`Block` instantiation", "process": null}}, "Unsqueeze08d7d127479843b4b07ececd56e52788-node": {"name": "Unsqueeze", "id": "Unsqueeze#c29c23", "uuid": "8710aa92d97749ddab51def47fc29c23", "args": ["arr"], "types": {"arr": "<class 'numpy.ndarray'>"}, "shapes": {"arr": null}, "skip_enforcement": false, "batch_type": "each", "tags": [], "class_name": "Unsqueeze", "DOCS": {"class": "Adds single dimension to array at specified  position\n    ", "__init__": "instantiates the block\n\nArgs:\n    name(str,None): the name of this block - how it will show up in the\n        graph.\n    batch_type(str, int): the type of the batch processing for your\n        process function. Either \"all\" or \"each\". \"all\" means that all\n        argument data will be passed into to your function at once,\n        \"each\" means that each argument datum will be passed in\n        individually\n    types(:obj:`dict`,None): Dictionary of input types. If arg doesn't\n        exist as a key, or if the value is None, then no checking is\n        done. If not provided, then will default to args as keys, None\n        as values.\n    shapes(:obj:`dict`,None): Dictionary of input shapes. If arg doesn't\n        exist as a key, or if the value is None, then no checking is\n        done. If not provided, then will default to args as keys, None\n        as values.\n    containers(:obj:`dict`,None): Dictionary of input containers. If arg\n        doesn't exist as a key, or if the value is None, then no\n        checking is done. If not provided, then will default to args as\n        keys, None as values.\n        *if batch_type is \"each\", then the container is irrelevant and can\n        be safely ignored!*\n    void(bool): Boolean value. By default all blocks return a value or\n        values as output. However, if printing to screen, plotting, or\n        saving data to a file, a block may not have a meaningful output\n        that should be stored in a pipeline's output dictionary. In this\n        case, void should be set to True, so that the output of the block\n        is ignored. The associated var key in the pipeline output will\n        contain a value of :obj:`None`. Default is False", "process": null}}, "freq_filter08eb6175843244a5bb640044e01d4764-node": {"name": "freq_filter", "id": "freq_filter#694eb7", "uuid": "06da5be7c3334afa8f09dd6b0d694eb7", "args": ["src", "kernel"], "types": {"src": "None", "kernel": "None"}, "shapes": {"src": null, "kernel": null}, "skip_enforcement": false, "batch_type": "each", "tags": [], "class_name": "FuncBlock", "DOCS": {"class": "Block that will run any function you give it, either unfettered through\nthe __call__ function, or with optional hardcoded parameters for use in a\npipeline. Typically the FuncBlock is only used in the :obj:`blockify`\ndecorator method.\n\nAttributes:\n    func(function): the function to call internally\n    preset_kwargs(dict): preset keyword arguments, typically used for\n        arguments that are not data to process", "__init__": "instantiates the function block\n\nArgs:\n    func (function): the function you desire to turn into a block\n    preset_kwargs (dict): preset keyword arguments, typically used for\n        arguments that are not data to process\n    **block_kwargs: keyword arguments for :obj:`Block` instantiation", "process": null}}, "ImageIFFTe302999cb8bb4d72a611814e141b7746-node": {"name": "ImageIFFT", "id": "ImageIFFT#429724", "uuid": "324ba5fb4c0347f5b8065a2282429724", "args": ["image"], "types": {"image": "None"}, "shapes": {"image": null}, "skip_enforcement": false, "batch_type": "each", "tags": ["filtering", "imagery"], "class_name": "ImageIFFT", "DOCS": {"class": "Performs an IFFT on each Image channel independently\n\nDefault Enforcement:\n    1) image\n        type: np.ndarray\n        shapes: [(None,None), (None,None,None)]\n\nBatch Size:\n    \"each\"", "__init__": "instantiates the ifft block", "process": "applies the ifft to each channel'\n\nArgs:\n    images(np.ndarray): N channel image"}}, "DisplaySafee0a40ef1de89443ba9a0c8fb18e529b0-node": {"name": "DisplaySafe", "id": "DisplaySafe#ce41b5", "uuid": "cd2227aa93fc4e4c8607ad2ef9ce41b5", "args": ["arr"], "types": {"arr": "<class 'numpy.ndarray'>"}, "shapes": {"arr": null}, "skip_enforcement": false, "batch_type": "each", "tags": [], "class_name": "DisplaySafe", "DOCS": {"class": "normalizes to [0,255] and bins to a displayable bitdepth\n\nDefault Enforcement:\n    1) image\n        type: np.ndarray\n        shapes: [(None,None), (None,None,None)]\n\nBatch Size:\n    \"each\"", "__init__": "instantiates the block\n\nArgs:\n    name(str,None): the name of this block - how it will show up in the\n        graph.\n    batch_type(str, int): the type of the batch processing for your\n        process function. Either \"all\" or \"each\". \"all\" means that all\n        argument data will be passed into to your function at once,\n        \"each\" means that each argument datum will be passed in\n        individually\n    types(:obj:`dict`,None): Dictionary of input types. If arg doesn't\n        exist as a key, or if the value is None, then no checking is\n        done. If not provided, then will default to args as keys, None\n        as values.\n    shapes(:obj:`dict`,None): Dictionary of input shapes. If arg doesn't\n        exist as a key, or if the value is None, then no checking is\n        done. If not provided, then will default to args as keys, None\n        as values.\n    containers(:obj:`dict`,None): Dictionary of input containers. If arg\n        doesn't exist as a key, or if the value is None, then no\n        checking is done. If not provided, then will default to args as\n        keys, None as values.\n        *if batch_type is \"each\", then the container is irrelevant and can\n        be safely ignored!*\n    void(bool): Boolean value. By default all blocks return a value or\n        values as output. However, if printing to screen, plotting, or\n        saving data to a file, a block may not have a meaningful output\n        that should be stored in a pipeline's output dictionary. In this\n        case, void should be set to True, so that the output of the block\n        is ignored. The associated var key in the pipeline output will\n        contain a value of :obj:`None`. Default is False", "process": "normalizes to given range and cast\n\nArgs:\n    arr(:obj:`numpy.ndarray`): array of any shape and type\n\nReturns:\n    :obj:`numpy.ndarray`: normalized array of same shape and casted\n        to the given type"}}, "CompareView178480474898426597a19738a9be0906-node": {"name": "CompareView", "id": "CompareView#55d4b2", "uuid": "5bd415cf334b4c23a85b6daa1e55d4b2", "args": ["image", "image2"], "types": {"image": "<class 'numpy.ndarray'>", "image2": "<class 'numpy.ndarray'>"}, "shapes": {"image": [[null, null], [null, null, null]], "image2": [[null, null], [null, null, null]]}, "skip_enforcement": false, "batch_type": "each", "tags": ["imagery"], "class_name": "CompareView", "DOCS": {"class": "Image Viewer that uses matplotlib internally to compare 2 images.\nNearly always guarenteed to work, but timing will be less accurate\nespecially for short timeframes\n\nThis viewer will work with online sphinx-generated examples\n\nAttributes:\n    pause_for(int): the amount of time in milliseconds to pause\n        between images\n\nDefault Enforcement:\n    1) image\n        type: np.ndarray\n        shapes: [(None,None), (None,None,None)]\n    2) image2\n        type: np.ndarray\n        shapes: [(None,None), (None,None,None)]\nBatch Size:\n    \"each\"", "__init__": "Instantiates the SequenceViewer\n\nArg:\n    pause_for(int): the amount of time in milliseconds to pause\n        between images. defaults to 500ms\n    close_fig(bool): whether or not to close the matplotlib figure after\n        processing is done. defaults to False", "process": "Displays the image in a matplotlib figure\n\nArgs:\n    image (np.ndarray): image\n    image2 (np.ndarray): second image\n\nReturns:\n    None"}}, "null50312f71f353468586d3c76ad6a2d905-node": {"name": "null", "id": "null#e73e27", "uuid": "833db4af358c4f1386d93021ade73e27", "args": ["null"], "types": {"null": "None"}, "shapes": {"null": null}, "skip_enforcement": false, "batch_type": "all", "tags": [], "class_name": "Leaf", "DOCS": {"class": "a block to act as a leaf node in the Pipeline Graph. Used to complete\nfinal outgoing edges from processing blocks\n\nAttributes:\n    var_name(str): the name of the variable this leaf represents", "__init__": "instantiates the leaf\n\nArgs:\n    var_name(str): the name of the variable this leaf represents", "process": "does nothing in a leaf"}}}, "JSON_GRAPH": {"directed": true, "multigraph": true, "graph": {}, "nodes": [{"args": [], "outputs": ["images"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "InputNone", "color": "blue", "shape": "pentagon", "class_name": "<class 'imagepypelines.core.block_subclasses.Input'>", "batch_type": "all", "id": "InputNone5168a000fe2b4752a6dbb0fb72a4ae60-node"}, {"args": ["images"], "outputs": ["shape"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "Dimensions", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines_image.blocks.Dimensions'>", "batch_type": "each", "id": "Dimensions4c2445c90bfc4149898bddd0d5df34e2-node"}, {"args": ["images"], "outputs": ["fft"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "ImageFFT", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines_image.blocks.ImageFFT'>", "batch_type": "each", "id": "ImageFFTcf3789055b374661965166fb0061b64e-node"}, {"args": ["shape"], "outputs": ["circles"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "circular_pass_filter", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines.core.block_subclasses.FuncBlock'>", "batch_type": "each", "id": "circular_pass_filter6ec397b7dd8443aab3dda2cf7c4d8af6-node"}, {"args": ["circles"], "outputs": ["unsqueezed"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "Unsqueeze", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines_image.blocks.Unsqueeze'>", "batch_type": "each", "id": "Unsqueeze08d7d127479843b4b07ececd56e52788-node"}, {"args": ["fft", "unsqueezed"], "outputs": ["filtered"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "freq_filter", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines.core.block_subclasses.FuncBlock'>", "batch_type": "each", "id": "freq_filter08eb6175843244a5bb640044e01d4764-node"}, {"args": ["filtered"], "outputs": ["ifft"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "ImageIFFT", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines_image.blocks.ImageIFFT'>", "batch_type": "each", "id": "ImageIFFTe302999cb8bb4d72a611814e141b7746-node"}, {"args": ["ifft"], "outputs": ["safe"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "DisplaySafe", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines_image.blocks.DisplaySafe'>", "batch_type": "each", "id": "DisplaySafee0a40ef1de89443ba9a0c8fb18e529b0-node"}, {"args": ["images", "safe"], "outputs": ["null"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "CompareView", "color": "orange", "shape": "square", "class_name": "<class 'imagepypelines_image.blocks.CompareView'>", "batch_type": "each", "id": "CompareView178480474898426597a19738a9be0906-node"}, {"args": ["null"], "outputs": ["null"], "validation_time": null, "processing_time": null, "avg_time_per_datum": null, "num_in": null, "n_batches": null, "pid": null, "name": "null", "color": "green", "shape": "ellipsis", "class_name": "<class 'imagepypelines.core.block_subclasses.Leaf'>", "batch_type": "all", "id": "null50312f71f353468586d3c76ad6a2d905-node"}], "links": [{"var_name": "images", "out_index": 0, "in_index": 0, "name": "image", "data": null, "source": "InputNone5168a000fe2b4752a6dbb0fb72a4ae60-node", "target": "Dimensions4c2445c90bfc4149898bddd0d5df34e2-node", "key": "images:0-->0"}, {"var_name": "images", "out_index": 0, "in_index": 0, "name": "image", "data": null, "source": "InputNone5168a000fe2b4752a6dbb0fb72a4ae60-node", "target": "ImageFFTcf3789055b374661965166fb0061b64e-node", "key": "images:0-->0"}, {"var_name": "images", "out_index": 0, "in_index": 0, "name": "image", "data": null, "source": "InputNone5168a000fe2b4752a6dbb0fb72a4ae60-node", "target": "CompareView178480474898426597a19738a9be0906-node", "key": "images:0-->0"}, {"var_name": "shape", "out_index": 0, "in_index": 0, "name": "shape", "data": null, "source": "Dimensions4c2445c90bfc4149898bddd0d5df34e2-node", "target": "circular_pass_filter6ec397b7dd8443aab3dda2cf7c4d8af6-node", "key": "shape:0-->0"}, {"var_name": "fft", "out_index": 0, "in_index": 0, "name": "src", "data": null, "source": "ImageFFTcf3789055b374661965166fb0061b64e-node", "target": "freq_filter08eb6175843244a5bb640044e01d4764-node", "key": "fft:0-->0"}, {"var_name": "circles", "out_index": 0, "in_index": 0, "name": "arr", "data": null, "source": "circular_pass_filter6ec397b7dd8443aab3dda2cf7c4d8af6-node", "target": "Unsqueeze08d7d127479843b4b07ececd56e52788-node", "key": "circles:0-->0"}, {"var_name": "unsqueezed", "out_index": 0, "in_index": 1, "name": "kernel", "data": null, "source": "Unsqueeze08d7d127479843b4b07ececd56e52788-node", "target": "freq_filter08eb6175843244a5bb640044e01d4764-node", "key": "unsqueezed:0-->1"}, {"var_name": "filtered", "out_index": 0, "in_index": 0, "name": "image", "data": null, "source": "freq_filter08eb6175843244a5bb640044e01d4764-node", "target": "ImageIFFTe302999cb8bb4d72a611814e141b7746-node", "key": "filtered:0-->0"}, {"var_name": "ifft", "out_index": 0, "in_index": 0, "name": "arr", "data": null, "source": "ImageIFFTe302999cb8bb4d72a611814e141b7746-node", "target": "DisplaySafee0a40ef1de89443ba9a0c8fb18e529b0-node", "key": "ifft:0-->0"}, {"var_name": "safe", "out_index": 0, "in_index": 1, "name": "image2", "data": null, "source": "DisplaySafee0a40ef1de89443ba9a0c8fb18e529b0-node", "target": "CompareView178480474898426597a19738a9be0906-node", "key": "safe:0-->1"}, {"var_name": "null", "out_index": 0, "in_index": 0, "name": "null", "data": null, "source": "CompareView178480474898426597a19738a9be0906-node", "target": "null50312f71f353468586d3c76ad6a2d905-node", "key": 0}]}}